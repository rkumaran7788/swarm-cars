#include <WiFi.h>
#include <WiFiUdp.h>

const char* ssid = "motorola edge 40";
const char* password = "kumar777888";

WiFiUDP udp;
const int localUdpPort = 4210;
char incomingPacket[255];

// IP addresses of follower cars
const char* follower1IP = "192.168.137.121";
const char* follower2IP = "192.168.137.215";
const int followerPort = 4210;

// Motor pins
const int IN1 = 14;
const int IN2 = 27;
const int IN3 = 26;
const int IN4 = 25;

const int baseSpeed = 140;
unsigned long lastTurnTime = 0;
const unsigned long turnCooldown = 2000;

void setup() {
  Serial.begin(115200);

  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\nConnected!");
  Serial.print("Leader IP address: ");
  Serial.println(WiFi.localIP());

  udp.begin(localUdpPort);
}

void stopMotors() {
  analogWrite(IN1, 0); analogWrite(IN2, 0);
  analogWrite(IN3, 0); analogWrite(IN4, 0);
}

void moveForward(int speedL, int speedR) {
  analogWrite(IN1, speedL); analogWrite(IN2, 0);
  analogWrite(IN3, speedR); analogWrite(IN4, 0);
}

void moveBackward(int speedL, int speedR) {
  analogWrite(IN1, 0); analogWrite(IN2, speedL);
  analogWrite(IN3, 0); analogWrite(IN4, speedR);
}

void pivotLeft() {
  analogWrite(IN1, 0); analogWrite(IN2, 0);
  analogWrite(IN3, baseSpeed); analogWrite(IN4, 0);
  delay(400);
  stopMotors();
}

void pivotRight() {
  analogWrite(IN1, baseSpeed); analogWrite(IN2, 0);
  analogWrite(IN3, 0); analogWrite(IN4, 0);
  delay(400);
  stopMotors();
}

void sendToFollowers(String cmd) {
  udp.beginPacket(follower1IP, followerPort);
  udp.print(cmd);
  udp.endPacket();

  udp.beginPacket(follower2IP, followerPort);
  udp.print(cmd);
  udp.endPacket();
}

void loop() {
  int packetSize = udp.parsePacket();
  if (packetSize) {
    int len = udp.read(incomingPacket, 255);
    if (len > 0) incomingPacket[len] = '\0';

    String command = String(incomingPacket);
    Serial.println("Received gesture: " + command);

    // Send to followers first
    sendToFollowers(command);

    // Execute locally
    if (command == "forward") {
      moveForward(baseSpeed, baseSpeed);
    }
    else if (command == "backward") {
      moveBackward(baseSpeed, baseSpeed);
    }
    else if (command == "stop") {
      stopMotors();
    }
    else if (command == "left") {
      if (millis() - lastTurnTime > turnCooldown) {
        pivotLeft();
        lastTurnTime = millis();
      }
    }
    else if (command == "right") {
      if (millis() - lastTurnTime > turnCooldown) {
        pivotRight();
        lastTurnTime = millis();
      }
    }
    else if (command == "zigzag") {
      unsigned long startTime = millis();
      while (millis() - startTime < 5000) {
        analogWrite(IN1, 0); analogWrite(IN2, 0);
        analogWrite(IN3, baseSpeed); analogWrite(IN4, 0);
        delay(400); stopMotors(); delay(100);

        analogWrite(IN1, baseSpeed); analogWrite(IN2, 0);
        analogWrite(IN3, 0); analogWrite(IN4, 0);
        delay(400); stopMotors(); delay(100);
      }
      stopMotors();
    }
    else {
      stopMotors();
    }

    delay(50);
  }
}